//! Convert between hiragana („Å≤„Çâ„Åå„Å™) and katakana („Ç´„Çø„Ç´„Éä).

use std::sync::OnceLock;

use crate::mapping;
use crate::mapping::MappingQueue;

/// Katakana unicode block plus repetition marks.
///
/// https://unicode.org/charts/nameslist/n_30A0.html
const KATAKANA: &str = "„Ç°„Ç¢„Ç£„Ç§„Ç•„Ç¶„Çß„Ç®„Ç©„Ç™„Ç´„Ç¨„Ç≠„ÇÆ„ÇØ„Ç∞„Ç±„Ç≤„Ç≥„Ç¥„Çµ„Ç∂„Ç∑„Ç∏„Çπ„Ç∫„Çª„Çº„ÇΩ„Çæ„Çø„ÉÄ„ÉÅ„ÉÇ„ÉÉ„ÉÑ„ÉÖ„ÉÜ„Éá„Éà„Éâ„Éä„Éã„Éå„Éç„Éé„Éè„Éê„Éë„Éí„Éì„Éî„Éï„Éñ„Éó„Éò„Éô„Éö„Éõ„Éú„Éù„Éû„Éü„É†„É°„É¢„É£„É§„É•„É¶„Éß„É®„É©„É™„É´„É¨„É≠„ÉÆ„ÉØ„É∞„É±„É≤„É≥„É¥„Éµ„É∂„ÉΩ„Éæ";
/// Hiragana unicode block plus repetition marks.
///
/// https://unicode.org/charts/nameslist/n_3040.html
const HIRAGANA: &str = "„ÅÅ„ÅÇ„ÅÉ„ÅÑ„ÅÖ„ÅÜ„Åá„Åà„Åâ„Åä„Åã„Åå„Åç„Åé„Åè„Åê„Åë„Åí„Åì„Åî„Åï„Åñ„Åó„Åò„Åô„Åö„Åõ„Åú„Åù„Åû„Åü„Å†„Å°„Å¢„Å£„Å§„Å•„Å¶„Åß„Å®„Å©„Å™„Å´„Å¨„Å≠„ÅÆ„ÅØ„Å∞„Å±„Å≤„Å≥„Å¥„Åµ„Å∂„Å∑„Å∏„Åπ„Å∫„Åª„Åº„ÅΩ„Åæ„Åø„ÇÄ„ÇÅ„ÇÇ„ÇÉ„ÇÑ„ÇÖ„ÇÜ„Çá„Çà„Çâ„Çä„Çã„Çå„Çç„Çé„Çè„Çê„Çë„Çí„Çì„Çî„Çï„Çñ„Çù„Çû";

/// „ÇÑË°å„ÅÑÊÆµ
const YI_H: &str = "õÄÜ";
/// „ÇÑË°å„ÅàÊÆµ
const YE_H: &str = "õÄÅ";
/// „ÇèË°å„ÅÜÊÆµ
const WU_H: &str = "õÑü";
/// Â∞èÊõ∏„Åç„ÅÆ„Äå„Åì„Äç
const KO_H: &str = "õÑ≤";
/// „É§Ë°å„Ç§ÊÆµ
const YI_K: &str = "õÑ†";
/// „É§Ë°å„Ç®ÊÆµ
const YE_K: &str = "õÑ°";
/// „ÉØË°å„ÅÜÊÆµ
const WU_K: &str = "õÑ¢";
/// Â∞èÊõ∏„Åç„ÅÆ„Äå„Ç≥„Äç
const KO_K: &str = "õÖï";

/// Map hiragana („Å≤„Çâ„Åå„Å™) to katakana („Ç´„Çø„Ç´„Éä).
#[wasm_bindgen::prelude::wasm_bindgen]
pub fn hira_to_kata(input: &str) -> String {
    static HIRA_TO_KATA: OnceLock<MappingQueue<'static>> = OnceLock::new();
    HIRA_TO_KATA
        .get_or_init(|| {
            // XXX: Composite unicode characters are present
            // Edit with care
            MappingQueue::new()
                .extend(mapping::char_mappings(HIRAGANA, KATAKANA))
                .push("„ÉØ„Çô", "„É∑")
                .push("„É∞„Çô", "„É∏")
                .push("„É±„Çô", "„Éπ")
                .push("„É≤„Çô", "„É∫")
                .push(YI_H, YI_K)
                .push(YE_H, YE_K)
                .push(WU_H, WU_K)
                .push(KO_H, KO_K)
        })
        .apply(input)
}

/// Map katakana („Ç´„Çø„Ç´„Éä) to hiragana („Å≤„Çâ„Åå„Å™).
#[wasm_bindgen::prelude::wasm_bindgen]
pub fn kata_to_hira(input: &str) -> String {
    static KATA_TO_HIRA: OnceLock<MappingQueue<'static>> = OnceLock::new();
    KATA_TO_HIRA
        .get_or_init(|| {
            // XXX: Composite unicode characters are present
            // Edit with care
            MappingQueue::new()
                .extend(mapping::char_mappings(KATAKANA, HIRAGANA))
                .push("„É∑", "„Çè„Çô")
                .push("„É∏", "„Çê„Çô")
                .push("„Éπ", "„Çë„Çô")
                .push("„É∫", "„Çí„Çô")
                .push(YI_K, YI_H)
                .push(YE_K, YE_H)
                .push(WU_K, WU_H)
                .push(KO_K, KO_H)
        })
        .apply(input)
}

#[cfg(test)]
mod tests {
    use super::*;

    // XXX: Composite unicode characters are present
    // Edit with care
    #[rustfmt::skip]
    const GO_JUU_ON: [(&str, &str); 50] = [
        ("„Çè", "„ÉØ"), ("„Çâ", "„É©"), ("„ÇÑ", "„É§"), ("„Åæ", "„Éû"), ("„ÅØ", "„Éè"), ("„Å™", "„Éä"), ("„Åü", "„Çø"), ("„Åï", "„Çµ"), ("„Åã", "„Ç´"), ("„ÅÇ", "„Ç¢"),
        ("„Çê", "„É∞"), ("„Çä", "„É™"), (YI_H, YI_K), ("„Åø", "„Éü"), ("„Å≤", "„Éí"), ("„Å´", "„Éã"), ("„Å°", "„ÉÅ"), ("„Åó", "„Ç∑"), ("„Åç", "„Ç≠"), ("„ÅÑ", "„Ç§"),
        (WU_H, WU_K), ("„Çã", "„É´"), ("„ÇÜ", "„É¶"), ("„ÇÄ", "„É†"), ("„Åµ", "„Éï"), ("„Å¨", "„Éå"), ("„Å§", "„ÉÑ"), ("„Åô", "„Çπ"), ("„Åè", "„ÇØ"), ("„ÅÜ", "„Ç¶"),
        ("„Çë", "„É±"), ("„Çå", "„É¨"), (YE_H, YE_K), ("„ÇÅ", "„É°"), ("„Å∏", "„Éò"), ("„Å≠", "„Éç"), ("„Å¶", "„ÉÜ"), ("„Åõ", "„Çª"), ("„Åë", "„Ç±"), ("„Åà", "„Ç®"),
        ("„Çí", "„É≤"), ("„Çç", "„É≠"), ("„Çà", "„É®"), ("„ÇÇ", "„É¢"), ("„Åª", "„Éõ"), ("„ÅÆ", "„Éé"), ("„Å®", "„Éà"), ("„Åù", "„ÇΩ"), ("„Åì", "„Ç≥"), ("„Åä", "„Ç™"),
    ];
    #[rustfmt::skip]
    const HATSUON: [(&str, &str); 1] = [
        ("„Çì", "„É≥"),
    ];
    #[rustfmt::skip]
    const DAKUTEN: [(&str, &str); 29] = [
        ("„Çè„Çô", "„É∑"), ("„Å∞", "„Éê"), ("„Å†", "„ÉÄ"), ("„Åñ", "„Ç∂"), ("„Åå", "„Ç¨"), ("„ÅÇ„Çô", "„Ç¢„Çô"),
        ("„Çê„Çô", "„É∏"), ("„Å≥", "„Éì"), ("„Å¢", "„ÉÇ"), ("„Åò", "„Ç∏"), ("„Åé", "„ÇÆ"), ("„ÅÑ„Çô", "„Ç§„Çô"),
                      ("„Å∂", "„Éñ"), ("„Å•", "„ÉÖ"), ("„Åö", "„Ç∫"), ("„Åê", "„Ç∞"), ("„Çî", "„É¥"),
        ("„Çë„Çô", "„Éπ"), ("„Åπ", "„Éô"), ("„Åß", "„Éá"), ("„Åú", "„Çº"), ("„Åí", "„Ç≤"), ("„Åà„Çô", "„Ç®„Çô"),
        ("„Çí„Çô", "„É∫"), ("„Åº", "„Éú"), ("„Å©", "„Éâ"), ("„Åû", "„Çæ"), ("„Åî", "„Ç¥"), ("„Åä„Çô", "„Ç™„Çô"),
    ];
    #[rustfmt::skip]
    const HANDAKUTEN: [(&str, &str); 30] = [
        ("„Çâ„Çö", "„É©„Çö"), ("„Å±", "„Éë"), ("„Åü„Çö", "„Çø„Çö"), ("„Åï„Çö", "„Çµ„Çö"), ("„Åã„Çö", "„Ç´„Çö"), ("„ÅÇ„Çö", "„Ç¢„Çö"),
        ("„Çä„Çö", "„É™„Çö"), ("„Å¥", "„Éî"), ("„Å°„Çö", "„ÉÅ„Çö"), ("„Åó„Çö", "„Ç∑„Çö"), ("„Åç„Çö", "„Ç≠„Çö"), ("„ÅÑ„Çö", "„Ç§„Çö"),
        ("„Çã„Çö", "„É´„Çö"), ("„Å∑", "„Éó"), ("„Å§„Çö", "„ÉÑ„Çö"), ("„Åô„Çö", "„Çπ„Çö"), ("„Åè„Çö", "„ÇØ„Çö"), ("„ÅÜ„Çö", "„Ç¶„Çö"),
        ("„Çå„Çö", "„É¨„Çö"), ("„Å∫", "„Éö"), ("„Å¶„Çö", "„ÉÜ„Çö"), ("„Åõ„Çö", "„Çª„Çö"), ("„Åë„Çö", "„Ç±„Çö"), ("„Åà„Çö", "„Ç®„Çö"),
        ("„Çç„Çö", "„É≠„Çö"), ("„ÅΩ", "„Éù"), ("„Å®„Çö", "„Éà„Çö"), ("„Åù„Çö", "„ÇΩ„Çö"), ("„Åì„Çö", "„Ç≥„Çö"), ("„Åä„Çö", "„Ç™„Çö"),
    ];
    #[rustfmt::skip]
    const KOGAKI: [(&str, &str); 13] = [
        ("„Çé", "„ÉÆ"), ("„ÇÉ", "„É£"),               ("„Çï", "„Éµ"), ("„ÅÅ", "„Ç°"),
                                                                ("„ÅÉ", "„Ç£"),
                      ("„ÇÖ", "„É•"), ("„Å£", "„ÉÉ"),               ("„ÅÖ", "„Ç•"),
                                                  ("„Çñ", "„É∂"), ("„Åá", "„Çß"),
                      ("„Çá", "„Éß"),               (KO_H, KO_K), ("„Åâ", "„Ç©"),
    ];

    #[test]
    #[wasm_bindgen_test::wasm_bindgen_test]
    fn hira_kata_bijection() {
        for pairs in [
            &GO_JUU_ON as &[(&str, &str)],
            &HATSUON,
            &DAKUTEN,
            &HANDAKUTEN,
            &KOGAKI,
        ] {
            for (hira, kata) in pairs {
                assert_eq!(&hira_to_kata(hira), kata);
                assert_eq!(&kata_to_hira(kata), hira);
            }
        }
    }
}
